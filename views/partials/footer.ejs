<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.14.1/build/ol.js"></script>
<script src="https://spin.js.org/spin.umd.js" crossorigin="anonymous"></script>

<script type="text/javascript">
    const isBlank = (obj) => {
		return (!obj || obj === "");
    }

    const loadIP2Geo = (event) => {
        event.preventDefault();

        var varIPAddr = $("input").val();

        if (!isBlank(varIPAddr)) {
            let xhr = $.ajax({
                url: "/api/geoip",
                method: "POST",
                data: {
                    "ipaddress": varIPAddr
                },
                beforeSend: function () {
                    $(".result").removeClass("hide");

                    var opts = {
                        lines: 13, // The number of lines to draw
                        length: 38, // The length of each line
                        width: 17, // The line thickness
                        radius: 45, // The radius of the inner circle
                        scale: 1, // Scales overall size of the spinner
                        corners: 1, // Corner roundness (0..1)
                        speed: 1, // Rounds per second
                        rotate: 0, // The rotation offset
                        animation: 'spinner-line-shrink', // The CSS animation name for the lines
                        direction: 1, // 1: clockwise, -1: counterclockwise
                        color: '#000000', // CSS color or array of colors
                        fadeColor: 'transparent', // CSS color or array of colors
                        top: '50%', // Top position relative to parent
                        left: '50%', // Left position relative to parent
                        shadow: '0 0 1px transparent', // Box-shadow for the lines
                        zIndex: 2000000000, // The z-index (defaults to 2e9)
                        className: 'spinner', // The CSS class to assign to the spinner
                        position: 'absolute', // Element positioning
                    };

                    var target = $(".mapWrapper")[0];
                    window.spinner = new Spin.Spinner(opts).spin(target);
                },
                success:function(data) {
                    var lng = data.city.location.longitude;
                    var lat = data.city.location.latitude;
                    
                    // Collect Result in a array to render as a List!
                    window.arrayMarker.push({
                        "longitude": lng, 
                        "latitude": lat,
                        "data": data
                    });

                    var vectorLayer = new ol.layer.Vector({
                        target: "points",
                        source: new ol.source.Vector(),
                        style: new ol.style.Style({
                            image: new ol.style.Icon({
                                anchor: [0.5, 0.5],
                                anchorXUnits: "fraction",
                                anchorYUnits: "fraction",
                                src: "https://raw.githubusercontent.com/Concept211/Google-Maps-Markers/master/images/marker_red" + window.arrayMarker.length + ".png"
                            })
                        })
                    });
                    window.map.addLayer(vectorLayer);

                    var source = vectorLayer.getSource();
                    var pointFeature = new ol.Feature({
                        geometry: new ol.geom.Point(ol.proj.transform([parseFloat(lng), parseFloat(lat)], 'EPSG:4326', 'EPSG:3857')),
                    });
                    source.addFeature(pointFeature);

                    window.map.getView().fit(vectorLayer.getSource().getExtent(), {
                        size: map.getSize(),
                        maxZoom: 13
                    });
                },
                error: function () {
                },
                complete: function () {
                    window.spinner.stop();
                }
            });
        }
        else {
            $("input").parents().eq(1).addClass("input-error");
            window.setTimeout(function () {
                $("input").parents().eq(1).removeClass("input-error");
            }, 810);
        }
    };

    $(document).ready(function() {
        window.arrayMarker = [];
        window.map = new ol.Map({
            target: "map",
            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM()
                })
            ],
            view: new ol.View({
                center: ol.proj.fromLonLat([0, 0]),
                zoom: 0
            })
        });
        //if (!isBlank($("input").val())) {
            //loadIP2Geo();
        //}

        $("button").bind("click", loadIP2Geo);
    });
</script>